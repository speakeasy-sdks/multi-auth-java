/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.example.MultipleAuthTester;

import com.example.MultipleAuthTester.utils.HTTPClient;
import com.example.MultipleAuthTester.utils.HTTPRequest;
import com.example.MultipleAuthTester.utils.JSON;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;

/**
 * Car operations
 */
public class Cars {
	
	private SDKConfiguration sdkConfiguration;

	public Cars(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Find cars by CNIC
     * Returns cars based on CNIC with apiKey and  httpBasic security
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.example.MultipleAuthTester.models.operations.GetCarsByCNICResponse getCarsByCNIC(com.example.MultipleAuthTester.models.operations.GetCarsByCNICRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = com.example.MultipleAuthTester.utils.Utils.generateURL(com.example.MultipleAuthTester.models.operations.GetCarsByCNICRequest.class, baseUrl, "/cars/{cnic}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.example.MultipleAuthTester.models.operations.GetCarsByCNICResponse res = new com.example.MultipleAuthTester.models.operations.GetCarsByCNICResponse(contentType, httpRes.statusCode()) {{
            cars = null;
            errorModel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.example.MultipleAuthTester.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.example.MultipleAuthTester.models.shared.Car[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.example.MultipleAuthTester.models.shared.Car[].class);
                res.cars = out;
            }
        }
        else {
            if (com.example.MultipleAuthTester.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.example.MultipleAuthTester.models.shared.ErrorModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.example.MultipleAuthTester.models.shared.ErrorModel.class);
                res.errorModel = out;
            }
        }

        return res;
    }

    /**
     * Find cars by ID
     * Returns cars based on ID with apiKey or httpBasic security
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.example.MultipleAuthTester.models.operations.GetCarsByIdResponse getCarsById(com.example.MultipleAuthTester.models.operations.GetCarsByIdRequest request, com.example.MultipleAuthTester.models.operations.GetCarsByIdSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = com.example.MultipleAuthTester.utils.Utils.generateURL(com.example.MultipleAuthTester.models.operations.GetCarsByIdRequest.class, baseUrl, "/carsbyid/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = com.example.MultipleAuthTester.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.example.MultipleAuthTester.models.operations.GetCarsByIdResponse res = new com.example.MultipleAuthTester.models.operations.GetCarsByIdResponse(contentType, httpRes.statusCode()) {{
            cars = null;
            errorModel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.example.MultipleAuthTester.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.example.MultipleAuthTester.models.shared.Car[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.example.MultipleAuthTester.models.shared.Car[].class);
                res.cars = out;
            }
        }
        else {
            if (com.example.MultipleAuthTester.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.example.MultipleAuthTester.models.shared.ErrorModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.example.MultipleAuthTester.models.shared.ErrorModel.class);
                res.errorModel = out;
            }
        }

        return res;
    }

    /**
     * Find cars by Name
     * Returns cars based on NAME with apiKeyHeader and httpBasic security
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public com.example.MultipleAuthTester.models.operations.GetCarsByNameResponse getCarsByName(com.example.MultipleAuthTester.models.operations.GetCarsByNameRequest request, com.example.MultipleAuthTester.models.operations.GetCarsByNameSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = com.example.MultipleAuthTester.utils.Utils.generateURL(com.example.MultipleAuthTester.models.operations.GetCarsByNameRequest.class, baseUrl, "/carsbyname/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = com.example.MultipleAuthTester.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        com.example.MultipleAuthTester.models.operations.GetCarsByNameResponse res = new com.example.MultipleAuthTester.models.operations.GetCarsByNameResponse(contentType, httpRes.statusCode()) {{
            cars = null;
            errorModel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (com.example.MultipleAuthTester.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.example.MultipleAuthTester.models.shared.Car[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.example.MultipleAuthTester.models.shared.Car[].class);
                res.cars = out;
            }
        }
        else {
            if (com.example.MultipleAuthTester.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.example.MultipleAuthTester.models.shared.ErrorModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), com.example.MultipleAuthTester.models.shared.ErrorModel.class);
                res.errorModel = out;
            }
        }

        return res;
    }
}